# List of WS methods to whitelist.
ws_method_whitelist = [
    "eth_subscribe",
    "eth_chainId",
    "eth_unsubscribe"
]
# Enable WS on this backend group. There can only be one WS-enabled backend group.
ws_backend_group = "main"


[backends]
# A map of backends by name.
[backends.local]
# The URL to contact the backend at. Will be read from the environment
# if an environment variable prefixed with $ is provided.
rpc_url = "http://localhost:8545"
# The WS URL to contact the backend at. Will be read from the environment
# if an environment variable prefixed with $ is provided.
ws_url = "ws://localhost:8546"
username = ""
# An HTTP Basic password to authenticate with the backend. Will be read from
# the environment if an environment variable prefixed with $ is provided.
password = ""
max_rps = 3
max_ws_conns = 1
# Path to a custom root CA.
ca_file = ""
# Path to a custom client cert file.
client_cert_file = ""
# Path to a custom client key file.
client_key_file = ""
# Allows backends to skip peer count checking, default false
# consensus_skip_peer_count = true
# Specified the target method to get receipts, default "debug_getRawReceipts"
# See https://github.com/ethereum-optimism/optimism/blob/186e46a47647a51a658e699e9ff047d39444c2de/op-node/sources/receipts.go#L186-L253
consensus_receipts_target = "eth_getBlockReceipts"

[server]
# Host for the proxyd RPC server to listen on.
rpc_host = "0.0.0.0"
# Port for the above.
rpc_port = 8080
# Host for the proxyd WS server to listen on.
ws_host = "0.0.0.0"
# Port for the above
# Set the ws_port to 0 to disable WS
ws_port = 8085
# Maximum client body size, in bytes, that the server will accept.
max_body_size_bytes = 10485760
max_concurrent_rpcs = 100000
# Server log level
log_level = "info"

[backend_groups]
[backend_groups.main]
backends = ["local"]
# Enable consensus awareness for backend group, making it act as a load balancer, default false
# consensus_aware = true
# Period in which the backend wont serve requests if banned, default 5m
# consensus_ban_period = "1m"
# Maximum delay for update the backend, default 30s
# consensus_max_update_threshold = "20s"
# Maximum block lag, default 8
# consensus_max_block_lag = 16
# Minimum peer count, default 3
# consensus_min_peer_count = 4


# Mapping of methods to backend groups.
[rpc_method_mappings]
#Getting Blocks
# Retrieves information from a particular block in the blockchain.
eth_blockNumber = "main"
eth_getBlockByNumber = "main"
eth_getBlockByHash = "main"
eth_getBlockTransactionCountByNumber = "main"
eth_getBlockTransactionCountByHash = "main"
eth_getBlockRange = "main"
#Getting Uncles
#Returns information on uncle blocks which are network rejected blocks and replaced by a canonical block instead.
eth_getUncleByBlockHashAndIndex = "main"
eth_getUncleByBlockNumberAndIndex = "main"
eth_getUncleCountByBlockHash = "main"
eth_getUncleCountByBlockNumber = "main"
#Getting hash( alchemy not inculded)
eth_getHeaderByNumber = "main"
eth_getHeaderByHash = "main"
#Reading Transactions
#Retrieves information on the state data for addresses regardless of whether it is a user or a smart contract.
eth_getTransactionByBlockHashAndIndex = "main"
eth_getTransactionByBlockNumberAndIndex = "main"
eth_getRawTransactionByBlockNumberAndIndex = "main"   #( alchemy not inculded)
eth_getRawTransactionByBlockHashAndIndex = "main"     #( alchemy not inculded)
eth_getTransactionCount = "main"
eth_getTransactionByHash = "main"
eth_getTransactionReceipt = "main"
eth_getRawTransactionByHash = "main"
#Writing Transactions & EVM Execution
#Allows developers to both send ETH from one address to another, write data on-chain, and interact with smart contracts.
eth_call = "main"
eth_sendRawTransaction = "main"
eth_resend = "main" #Getting hash( alchemy not inculded)
#Account Information
#Returns information regarding an address's stored on-chain data.
eth_getBalance = "main"
#eth_accounts = "main"    [forbidden]
eth_getProof = "main"
eth_getCode = "main"
eth_getStorageAt = "main"
#Event Logs
#Returns logs which are records that denote/provide context on specific events within a smart contract, like a token transfer or a change of ownership for example.
eth_getLogs = "main"
eth_newFilter = "main"
eth_newBlockFilter = "main"
eth_newPendingTransactionFilter = "main"
eth_getFilterLogs = "main"
eth_getFilterChanges = "main"
eth_uninstallFilter = "main"
#Chain Information
#Returns information on the Optimism network and internal settings.
eth_protocolVersion = "main"
eth_chainId = "main"
net_listening = "main"
eth_syncing = "main"
net_version = "main"
#Gas Estimation
eth_estimateGas = "main"
eth_gasPrice = "main"

#Real-time Events
#Introduces WebSocket-based requests/responses which leverage a network connection allowing developers to listen for changes continuously without the need for HTTP polling.
eth_subscribe = "main"
eth_unsubscribe = "main"
# txstatus,added for txstatus
eth_getTxStatusByHash = "main"
eth_getTxStatusDetailByHash = "main"

# rollup api
rollup_getInfo = "main"   #( alchemy not inculded)
rollup_gasPrices = "main" #( alchemy not inculded)

